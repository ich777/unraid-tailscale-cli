<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
  <!ENTITY name      "tailscale-cli">
  <!ENTITY author    "ich777">
  <!ENTITY version   "2025.04.19">
  <!ENTITY gitURL    "https://git.minenet.at/&author;/unraid-&name;/raw/branch/master">
  <!ENTITY pluginURL "&gitURL;/&name;.plg">
  <!ENTITY plugin    "/boot/config/plugins/&name;">
  <!ENTITY emhttp    "/usr/local/emhttp/plugins/&name;">
]>

<PLUGIN  name="&name;" author="&author;" version="&version;" pluginURL="&pluginURL;" min="6.9.0">

<CHANGES>

###2025.04.19
- Add daily cron job at 5:30 to check for new Tailscale versions

###2025.04.18a
- Initial Release

</CHANGES>

<FILE Name="&emhttp;/README.md">
<INLINE>
**Tailscale CLI**

This plugin will install the vanilla Tailscale on your Unraid server.
</INLINE>
</FILE>

<FILE Run="/bin/bash">
<INLINE>

#Create folders if not found
if [ ! -d "&plugin;" ]; then
  mkdir -p &plugin;/{state,tailscale-package}
fi

#Create settings file if not found and try to get Headscale container name
if [ ! -f "&plugin;/settings.cfg" ]; then
  echo 'TAILSCALE_ENABLED=true
TAILSCALED_PARAMS=' > "&plugin;/settings.cfg"
fi

#Get/set variables
SETTINGS="$(cat &plugin;/settings.cfg)"
NEWPACKAGE="false"

#Get latest and local version from Tailscale
TAILSCALE_VERSION="$(wget -qO- 'https://pkgs.tailscale.com/stable/?mode=json' | jq -r '.TarballsVersion')"
TAILSCALE_AVAIL_VERSION="$(ls -1 &plugin;/tailscale-package/ 2&gt;/dev/null | cut -d '_' -f2 | sort -V | tail -1)"
if [ -z "${TAILSCALE_VERSION}" ]; then
  if [ -z "${TAILSCALE_AVAIL_VERSION}" ]; then
    echo "ERROR: Can't get latest version and found no local version from Tailscale"
    rm -rf &plugin;
    exit 1
  else
    TAILSCALE_VERSION="${TAILSCALE_AVAIL_VERSION}"
    echo "WARNING: Can't get latest version from Tailscale, falling back to local version: ${TAILSCALE_VERSION}"
  fi
fi

#Version Check
if [ -z "${TAILSCALE_AVAIL_VERSION}" ]; then
  echo "Tailscale not found, downloading version: ${TAILSCALE_VERSION}"
  if wget -q -nc -O &plugin;/tailscale-package/tailscale_${TAILSCALE_VERSION}_amd64.tgz "https://pkgs.tailscale.com/stable/tailscale_${TAILSCALE_VERSION}_amd64.tgz" ; then
    echo "Download from Tailscale version ${TAILSCALE_VERSION} successful"
  else
    echo "ERROR: Download from Tailscale version ${TAILSCALE_VERSION} failed"
    rm -rf &plugin;
    exit 1
  fi
elif [ "${TAILSCALE_VERSION}" != "${TAILSCALE_AVAIL_VERSION}" ]; then
  if wget -q -nc -O &plugin;/tailscale-package/tailscale_${TAILSCALE_VERSION}_amd64.tgz "https://pkgs.tailscale.com/stable/tailscale_${TAILSCALE_VERSION}_amd64.tgz" ; then
    echo "Download from Tailscale version ${TAILSCALE_VERSION} successful"
    NEWPACKAGE="true"
  else
    echo "ERROR: Download from Tailscale version ${TAILSCALE_VERSION} failed"
    echo "       Falling back to local available Tailscale version: ${TAILSCALE_AVAIL_VERSION}"
    rm -rf &plugin;/tailscale-package/tailscale_${TAILSCALE_VERSION}_amd64.tgz
    TAILSCALE_VERSION="${TAILSCALE_AVAIL_VERSION}"
  fi
else
  echo "Tailscale version: ${TAILSCALE_AVAIL_VERSION} up-to-date"
fi

#Remove old Tailscale Packages
rm -f $(ls &plugin;/tailscale-package/tailscale_*.tgz 2&gt;/dev/null | grep -v "${TAILSCALE_VERSION}")

#Install/Update Tailsale
if [ ! -f /usr/local/bin/tailscaled ]; then
  echo "Installing Tailscale"
  tar -C /usr/local/bin --strip-components=1 -xf &plugin;/tailscale-package/tailscale_${TAILSCALE_VERSION}_amd64.tgz tailscale_${TAILSCALE_VERSION}_amd64/tailscaled tailscale_${TAILSCALE_VERSION}_amd64/tailscale
else
  if [ "${NEWPACKAGE}" == "true" ] ; then
    echo "Found new Tailscale version: ${TAILSCALE_VERSION}, installing..."
    if [ ! -z "$(pgrep --ns $$ tailscaled)" ]; then
      echo "Stopping Tailscale"
      tailscale down 2&gt;/dev/null
      kill -SIGTERM $(pgrep --ns $$ tailscaled) 2&gt;/dev/null
    fi
  tar -C /usr/local/bin --strip-components=1 -xf &plugin;/tailscale-package/tailscale_${TAILSCALE_VERSION}_amd64.tgz tailscale_${TAILSCALE_VERSION}_amd64/tailscaled tailscale_${TAILSCALE_VERSION}_amd64/tailscale
  fi
fi

#Start Tailscale if enabled
if [ "$(echo "${SETTINGS}" | grep "TAILSCALE_ENABLED=" | cut -d '=' -f2-)" == "true" ] &amp;&amp; [ -z "$(pgrep --ns $$ tailscaled)" ]; then
  TSD_PARAMS="$(echo "${SETTINGS}" | grep "TAILSCALED_params=" | cut -d '=' -f2-)"
  if [ ! -z "${TSD_PARAMS}" ]; then
    TSD_PARAMS=" ${TSD_PARAMS}"
  fi
  echo "Starting Tailscale"
  echo "/usr/local/bin/tailscaled -statedir=&plugin;/state${TSD_PARAMS} &gt;/dev/null 2&gt;&amp;1" | at now -M &gt;/dev/null 2&gt;&amp;1
elif [ "$(echo "${SETTINGS}" | grep "TAILSCALE_ENABLED=" | cut -d '=' -f2-)" == "true" ] &amp;&amp; [ ! -z "$(pgrep --ns $$ tailscaled)" ]; then
  echo "Tailscale already started"
else
  echo "WARNING: Tailscale disabled"
fi

#Install icon
if [ ! -d /usr/local/emhttp/plugins/&name;/images ]; then
  mkdir -p /usr/local/emhttp/plugins/&name;/images
fi
if [ ! -f &plugin;/&name;.png ]; then
  wget -q -O &plugin;/&name;.png "https://raw.githubusercontent.com/ich777/docker-templates/master/ich777/images/tailscale.png"
fi
if [ ! -f /usr/local/emhttp/plugins/&name;/images/&name;.png ]; then
  cp &plugin;/&name;.png /usr/local/emhttp/plugins/&name;/images/&name;.png
fi

#Install update script
if [ ! -d /usr/local/emhttp/plugins/&name;/scripts ]; then
  mkdir -p /usr/local/emhttp/plugins/&name;/scripts
fi
if [ ! -f &plugin;/tailscale-check.sh ]; then
  wget -q -O &plugin;/tailscale-check.sh "https://git.minenet.at/ich777/unraid-tailscale-cli/raw/branch/master/tailscale-check.sh"
fi
if [ ! -f /usr/local/emhttp/plugins/&name;/scripts/tailscale-check.sh ]; then
  cp &plugin;/tailscale-check.sh /usr/local/emhttp/plugins/&name;/scripts/tailscale-check.sh
  chmod +x /usr/local/emhttp/plugins/&name;/scripts/tailscale-check.sh
fi

#Create cron job
if [ ! -f &plugin;/tailscale.cron ]; then
  echo -e "# Tailscale CLI Plugin cron job:\n30 5 * * * /usr/local/emhttp/plugins/&name;/scripts/tailscale-check.sh &gt;/dev/null 2&gt;&amp;1\n\n" > &plugin;/tailscale.cron
  /usr/local/sbin/update_cron
fi

</INLINE>
</FILE>

<FILE Run="/bin/bash" Method="remove">
<INLINE>

echo "---------------------------------------"
echo "---Uninstalling Tailscale CLI plugin---"
echo "---------------------------------------"
#Stop Tailscale
if [ ! -z "$(pgrep --ns $$ tailscaled)" ]; then
  echo "Stopping Tailscale"
  tailscale down 2&gt;/dev/null
  kill -SIGTERM $(pgrep --ns $$ tailscaled) 2&gt;/dev/null
fi
#Remove plugin related files
rm -rf /usr/local/emhttp/plugins/&name; &plugin; /usr/local/bin/tailscaled /usr/local/bin/tailscale
#Update cron
update_cron
echo
echo "----------------------------------------------"
echo "------Tailscale CLI plugin uninstalled!-------"
echo "----------------------------------------------"
echo

</INLINE>
</FILE>
</PLUGIN>